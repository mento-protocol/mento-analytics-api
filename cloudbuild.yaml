# Cloud Build configuration for Mento Analytics API
# This file defines the build and deployment process with Sentry release integration

# NOTE: Variable Escaping in Cloud Build
# In Cloud Build YAML files, bash variables must be escaped with `$$` to prevent Cloud Build from interpreting them as substitution variables:
# 
# - Use `$$SERVICE_NAME` instead of `$SERVICE_NAME`
# - Use `$${VARIABLE}` instead of `${VARIABLE}` for bash variables
# - Cloud Build substitutions remain as `${_VARIABLE_NAME}`



substitutions:
  _AR_HOSTNAME: us-central1-docker.pkg.dev
  _AR_PROJECT_ID: mento-prod
  _AR_REPOSITORY: cloud-run-source-deploy
  _DEPLOY_REGION: us-central1
  _PLATFORM: managed
  _SERVICE_NAME: mento-analytics-api
  _SENTRY_ORG: mento-labs
  _SENTRY_PROJECT: analytics-api
  # _TRIGGER_ID will be automatically provided when run via Cloud Build trigger

options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE

steps:
  # Step 1: Generate Docker tag (ensure lowercase)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'generate-docker-tag'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Generate lowercase Docker tag
        DOCKER_TAG="${_AR_HOSTNAME}/${_AR_PROJECT_ID}/${_AR_REPOSITORY}/${_SERVICE_NAME}:$$(echo "$COMMIT_SHA" | tr '[:upper:]' '[:lower:]')"
        echo "Generated Docker tag: $$DOCKER_TAG"
        echo "$$DOCKER_TAG" > /workspace/docker_tag.txt

  # Step 2: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        DOCKER_TAG=$$(cat /workspace/docker_tag.txt)
        echo "Building Docker image with tag: $$DOCKER_TAG"
        docker build -t "$$DOCKER_TAG" --build-arg "RELEASE_VERSION=$COMMIT_SHA" . -f Dockerfile

  # Step 3: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        DOCKER_TAG=$$(cat /workspace/docker_tag.txt)
        echo "Pushing Docker image: $$DOCKER_TAG"
        docker push "$$DOCKER_TAG"

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'Deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        DOCKER_TAG=$$(cat /workspace/docker_tag.txt)
        echo "Deploying with Docker image: $$DOCKER_TAG"
        
        gcloud run deploy ${_SERVICE_NAME} \
          --platform=managed \
          --image="$$DOCKER_TAG" \
          --labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID,gcb-trigger-id=$_TRIGGER_ID \
          --region=${_DEPLOY_REGION} \
          --quiet \
          --set-env-vars=RELEASE_VERSION=$COMMIT_SHA

  # Step 5: Clone git repository for Sentry commit association
  - name: 'gcr.io/cloud-builders/git'
    id: 'git-clone'
    args:
      - 'clone'
      - 'https://github.com/mentolabs/mento-analytics-api.git'
      - '--branch=main'
      - '--depth=50'
      - '--single-branch'
      - 'git-repo'

  # Step 6: Create Sentry release and upload source maps (only after successful deployment)
  - name: 'node:22-alpine'
    id: 'sentry-release'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -e  # Exit on error for critical operations
        
        # Helper function for non-critical operations
        try_operation() {
          local operation_name="$1"
          shift
          echo "[INFO] Starting: $$operation_name"
          if "$@"; then
            echo "[SUCCESS] $$operation_name completed"
            return 0
          else
            echo "[WARNING] $$operation_name failed (non-critical, continuing...)"
            echo "[WARNING] Command was: $*"
            return 1
          fi
        }
        
        # Install dependencies needed for Sentry CLI
        echo "[INFO] Installing dependencies..."
        npm install -g pnpm
        pnpm install
        
        # Build the application to generate source maps
        echo "[INFO] Building application to generate source maps..."
        pnpm run build
        
        echo "[INFO] Sentry release version: $COMMIT_SHA"
        
        # Critical operations - these will fail the build if they fail
        echo "[INFO] Creating new release in Sentry..."
        npx @sentry/cli releases new $COMMIT_SHA \
          --org ${_SENTRY_ORG} \
          --project ${_SENTRY_PROJECT}
        
        echo "[INFO] Injecting Debug IDs into source files..."
        npx @sentry/cli sourcemaps inject ./dist \
          --org ${_SENTRY_ORG} \
          --project ${_SENTRY_PROJECT}
        
        echo "[INFO] Uploading source maps to Sentry..."
        npx @sentry/cli sourcemaps upload ./dist \
          --org ${_SENTRY_ORG} \
          --project ${_SENTRY_PROJECT} \
          --release $COMMIT_SHA
        
        # Non-critical operations - log but don't fail the build
        # Change to git repository directory for commit association
        cd git-repo
        try_operation "Associate commits with release" \
          npx @sentry/cli releases set-commits $COMMIT_SHA --auto \
          --org ${_SENTRY_ORG} \
          --project ${_SENTRY_PROJECT}
        cd ..
        
        # Critical operation
        echo "[INFO] Finalizing the release..."
        npx @sentry/cli releases finalize $COMMIT_SHA \
          --org ${_SENTRY_ORG} \
          --project ${_SENTRY_PROJECT}
        
        # Clean up source maps from the build output
        echo "[INFO] Cleaning up source maps..."
        find ./dist -name "*.map" -type f -delete
        
        # Mark the release as deployed to production
        echo "[INFO] Marking release as deployed to production..."
        npx @sentry/cli releases deploys $COMMIT_SHA new \
          --org ${_SENTRY_ORG} \
          --project ${_SENTRY_PROJECT} \
          --env production \
          --name "Cloud Run Deployment"
        
        echo "[SUCCESS] Sentry release process completed for version: $COMMIT_SHA"
    secretEnv: ['SENTRY_AUTH_TOKEN']

# Define secrets to be used
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/sentry-auth-token/versions/latest
      env: 'SENTRY_AUTH_TOKEN'

# Note: Images will be dynamically determined from docker_tag.txt file

# Tags for this build
tags:
  - 'gcp-cloud-build-deploy-cloud-run'
  - 'gcp-cloud-build-deploy-cloud-run-managed'
  - '${_SERVICE_NAME}'

timeout: '600s'
