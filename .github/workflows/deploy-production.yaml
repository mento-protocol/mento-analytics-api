name: Deploy to Production

on:
  push:
    branches: [main]

env:
  GCP_PROJECT_ID: mento-prod
  GCP_REGION: us-central1
  SERVICE_NAME: mento-analytics-api
  SENTRY_ORG: mento-labs
  SENTRY_PROJECT: analytics-api

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      deployments: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full git history for Sentry releases

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
       version: 10

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build application
      run: pnpm run build

    - name: Check for Docker changes
      id: docker-changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          docker:
            - 'Dockerfile'
            - 'package*.json'
            - 'pnpm-lock.yaml'
            - 'src/**'
            - 'tsconfig.json'

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Use existing Docker image
      if: steps.docker-changes.outputs.docker == 'false'
      run: |
        # Use the latest image from the registry
        IMAGE_TAG="us-central1-docker.pkg.dev/${GCP_PROJECT_ID}/cloud-run-source-deploy/mento-analytics-api:latest"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "Using existing Docker image: $IMAGE_TAG"

    - name: Set Docker image tag
      if: steps.docker-changes.outputs.docker == 'true'
      run: |
        IMAGE_TAG="us-central1-docker.pkg.dev/${GCP_PROJECT_ID}/cloud-run-source-deploy/mento-analytics-api:${GITHUB_SHA,,}"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "Docker image will be tagged as: $IMAGE_TAG"

    - name: Set up Docker Buildx
      if: steps.docker-changes.outputs.docker == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker for GCR
      if: steps.docker-changes.outputs.docker == 'true'
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Build and push Docker image
      if: steps.docker-changes.outputs.docker == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          RELEASE_VERSION=${{ github.sha }}

    - name: Install gcloud beta components
      run: |
        gcloud components install beta --quiet

    - name: Trigger Production Deployment
      id: deploy
      run: |
        echo "Triggering production deployment for commit: ${{ github.sha }}"
        echo "Using pre-built image: ${{ env.IMAGE_TAG }}"
        
        BUILD_ID=$(gcloud builds submit \
          --config=cloudbuild-minimal.yaml \
          --project=${{ env.GCP_PROJECT_ID }} \
          --format="value(id)" \
          --substitutions=_IMAGE_TAG=${{ env.IMAGE_TAG }},_COMMIT_SHA=${{ github.sha }} \
          --async)
        
        echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
        echo "Production deployment started with ID: $BUILD_ID"
        
        # Wait for deployment to complete and stream logs
        echo "Streaming deployment logs..."
        gcloud beta builds log "$BUILD_ID" --stream --project=${{ env.GCP_PROJECT_ID }}
        
        # Check deployment status after streaming logs
        echo "Checking deployment status..."
        BUILD_STATUS=$(gcloud builds describe "$BUILD_ID" \
          --project=${{ env.GCP_PROJECT_ID }} \
          --format="value(status)")
        
        echo "Deployment status: $BUILD_STATUS"
        
        if [ "$BUILD_STATUS" != "SUCCESS" ]; then
          echo "❌ Deployment failed with status: $BUILD_STATUS"
          echo "Deployment logs are available at: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.GCP_PROJECT_ID }}"
          exit 1
        else
          echo "✅ Deployment completed successfully"
        fi

    - name: Create Sentry release
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        echo "Creating Sentry release for version: ${{ github.sha }}"
        
        # Debug: Check if SENTRY_AUTH_TOKEN is set (without exposing the value)
        if [ -z "$SENTRY_AUTH_TOKEN" ]; then
          echo "❌ ERROR: SENTRY_AUTH_TOKEN is not set!"
          echo "Please add SENTRY_AUTH_TOKEN to your repository secrets."
          exit 1
        else
          echo "✅ SENTRY_AUTH_TOKEN is set (length: ${#SENTRY_AUTH_TOKEN})"
        fi
        
        # Create new release
        npx @sentry/cli releases new ${{ github.sha }} \
          --org ${{ env.SENTRY_ORG }} \
          --project ${{ env.SENTRY_PROJECT }}
        
        # Inject Debug IDs into source files
        npx @sentry/cli sourcemaps inject ./dist \
          --org ${{ env.SENTRY_ORG }} \
          --project ${{ env.SENTRY_PROJECT }}
        
        # Upload source maps
        npx @sentry/cli sourcemaps upload ./dist \
          --org ${{ env.SENTRY_ORG }} \
          --project ${{ env.SENTRY_PROJECT }} \
          --release ${{ github.sha }} \
          --validate
        
        # Associate commits with release
        npx @sentry/cli releases set-commits ${{ github.sha }} --auto \
          --org ${{ env.SENTRY_ORG }} \
          --project ${{ env.SENTRY_PROJECT }}
        
        # Finalize the release
        npx @sentry/cli releases finalize ${{ github.sha }} \
          --org ${{ env.SENTRY_ORG }} \
          --project ${{ env.SENTRY_PROJECT }}
        
        # Mark as deployed to production
        SERVICE_URL="https://mento-analytics-api-${GCP_PROJECT_ID}.${GCP_REGION}.run.app"
        npx @sentry/cli releases deploys ${{ github.sha }} new \
          --org ${{ env.SENTRY_ORG }} \
          --project ${{ env.SENTRY_PROJECT }} \
          --env production \
          --name "Production Deployment" \
          --url "$SERVICE_URL"

        find ./dist -name "*.map" -type f -delete
        echo "Source maps cleaned up\n"
        
        echo "✅ Sentry release completed successfully!"

    - name: Update deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const serviceUrl = 'https://mento-analytics-api-mento-prod.us-central1.run.app';
          
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            task: 'deploy:production',
            auto_merge: false,
            required_contexts: [],
            environment: 'production',
            description: 'Production deployment',
            production_environment: true
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            target_url: serviceUrl,
            environment_url: serviceUrl,
            description: 'Production deployment completed successfully'
          });
