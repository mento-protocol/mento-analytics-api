name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  GCP_PROJECT_ID: mento-prod
  GCP_REGION: us-central1
  SERVICE_NAME_PREFIX: analytics-api-preview

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      deployments: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Install gcloud beta components
      run: |
        gcloud components install beta --quiet

    - name: Extract branch name
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BRANCH_NAME="${{ github.head_ref }}"
        else
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        fi
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        
        # Generate safe branch name for Cloud Run service
        SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | \
          sed 's/[^a-zA-Z0-9-]/-/g' | \
          tr '[:upper:]' '[:lower:]' | \
          sed 's/^-//;s/-$//' | \
          sed 's/--*/-/g' | \
          cut -c1-40)
        echo "SAFE_BRANCH_NAME=$SAFE_BRANCH_NAME" >> $GITHUB_ENV
        echo "SERVICE_NAME=${SERVICE_NAME_PREFIX}-${SAFE_BRANCH_NAME}" >> $GITHUB_ENV

    - name: Trigger Deployment Cloud Build
      id: build
      run: |
        echo "Triggering deployment for branch: ${{ env.BRANCH_NAME }}"
        echo "Service to deploy: ${{ env.SERVICE_NAME }}"
        
        BUILD_ID=$(gcloud builds submit \
          --config=cloudbuild-preview.yaml \
          --substitutions=_BRANCH_NAME=${{ env.BRANCH_NAME }},_BRANCH_TAG=${{ env.SAFE_BRANCH_NAME }},_SHORT_SHA=${GITHUB_SHA::7},_COMMIT_SHA=${{ github.sha }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --format="value(id)" \
          --async)
        
        echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
        echo "Deployment build started with ID: $BUILD_ID"
        
        # Wait for build to complete
        # Use beta command for better log streaming
        gcloud beta builds log "$BUILD_ID" --stream --project=${{ env.GCP_PROJECT_ID }}

    - name: Get preview URL
      id: get-url
      run: |
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform=managed \
          --region=${{ env.GCP_REGION }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --format='value(status.url)' 2>/dev/null || echo "")
        
        if [ -z "$SERVICE_URL" ]; then
          echo "Failed to get service URL. The deployment might have failed."
          exit 1
        fi
        
        echo "PREVIEW_URL=$SERVICE_URL" >> $GITHUB_ENV
        echo "Preview URL: $SERVICE_URL"

    - name: Update deployment status
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PREVIEW_URL: ${{ env.PREVIEW_URL }}
      with:
        script: |
          const previewUrl = process.env.PREVIEW_URL;
          const serviceName = '${{ env.SERVICE_NAME }}';
          const prNumber = context.payload.pull_request.number;
          
          // Create deployment
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha,
            task: 'deploy:preview',
            auto_merge: false,
            required_contexts: [],
            environment: `preview-${prNumber}`,
            description: 'Preview deployment',
            transient_environment: true,
            production_environment: false
          });
          
          // Create deployment status
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            target_url: previewUrl,
            environment_url: previewUrl,
            description: 'Preview deployment ready'
          });

    - name: Comment on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PREVIEW_URL: ${{ env.PREVIEW_URL }}
      with:
        script: |
          const previewUrl = process.env.PREVIEW_URL;
          const prNumber = context.payload.pull_request.number;
          const serviceName = '${{ env.SERVICE_NAME }}';
          const sha = context.payload.pull_request.head.sha.substring(0, 7);
          
          // Check for existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## 🚀 Preview Deployment')
          );
          
          const commentBody = `## 🚀 Preview Deployment
          
          Your preview deployment is ready!
          
          🔗 **Preview URL**: ${previewUrl}/docs
          
          📝 **Details**:
          - Service: \`${serviceName}\`
          - Commit: \`${sha}\`
          - Branch: \`${{ env.BRANCH_NAME }}\`
          - Updated: ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
          
          ---
          
          This preview will be automatically updated with each new commit to this PR and will be deleted when the PR is merged or closed.`;
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
          }
