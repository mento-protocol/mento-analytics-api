name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  GCP_PROJECT_ID: mento-prod
  GCP_REGION: us-central1
  SERVICE_NAME_PREFIX: analytics-api-preview
  SENTRY_ORG: mento-labs
  SENTRY_PROJECT: analytics-api

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      deployments: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full git history for Sentry Releases

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build application
      run: pnpm run build

    - name: Check for Docker changes
      id: docker-changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          docker:
            - 'Dockerfile'
            - 'package*.json'
            - 'pnpm-lock.yaml'
            - 'src/**'
            - 'tsconfig.json'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Extract branch name
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BRANCH_NAME="${{ github.head_ref }}"
        else
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        fi
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        
        # Generate safe branch name for Cloud Run service
        # Prefix 'analytics-api-preview-' is 22 chars, leaving 41 chars for branch name
        SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | \
          sed 's/[^a-zA-Z0-9-]/-/g' | \
          tr '[:upper:]' '[:lower:]' | \
          sed 's/^-//;s/-$//' | \
          sed 's/--*/-/g' | \
          cut -c1-41)
        echo "SAFE_BRANCH_NAME=$SAFE_BRANCH_NAME" >> $GITHUB_ENV
        echo "SERVICE_NAME=${SERVICE_NAME_PREFIX}-${SAFE_BRANCH_NAME}" >> $GITHUB_ENV

    - name: Set Docker image tag
      run: |
        if [ "${{ steps.docker-changes.outputs.docker }}" == "true" ]; then
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7 | tr '[:upper:]' '[:lower:]')
          # Sanitize branch name for Docker tag (replace / with - and remove other invalid chars)
          BRANCH_SANITIZED=$(echo "${BRANCH_NAME}" | sed 's/[^a-zA-Z0-9.-]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-//;s/-$//')
          IMAGE_TAG="us-central1-docker.pkg.dev/${GCP_PROJECT_ID}/cloud-run-source-deploy/analytics-api-preview:${BRANCH_SANITIZED}-${SHORT_SHA}"
          echo "Docker image will be tagged as: $IMAGE_TAG"
        else
          IMAGE_TAG="us-central1-docker.pkg.dev/${GCP_PROJECT_ID}/cloud-run-source-deploy/analytics-api-preview:latest"
          echo "Using existing Docker image: $IMAGE_TAG"
        fi
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      if: steps.docker-changes.outputs.docker == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker for GCR
      if: steps.docker-changes.outputs.docker == 'true'
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Build and push Docker image
      if: steps.docker-changes.outputs.docker == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          RELEASE_VERSION=${{ env.BRANCH_NAME }}-${{ github.sha }}

    - name: Install gcloud beta components
      run: |
        gcloud components install beta --quiet

    - name: Trigger Preview Deployment via Google Cloud Build
      id: deploy
      run: |
        echo "Triggering deployment for branch: ${{ env.BRANCH_NAME }}"
        echo "Service to deploy: ${{ env.SERVICE_NAME }}"
        echo "Using pre-built image: ${{ env.IMAGE_TAG }}"
        
        BUILD_ID=$(gcloud builds submit \
          --config=cloudbuild-preview.yaml \
          --project=${{ env.GCP_PROJECT_ID }} \
          --format="value(id)" \
          --substitutions=_BRANCH_NAME=${{ env.BRANCH_NAME }},_BRANCH_TAG=${{ env.SAFE_BRANCH_NAME }},_SHORT_SHA=${GITHUB_SHA::7},_COMMIT_SHA=${{ github.sha }},_IMAGE_TAG=${{ env.IMAGE_TAG }} \
          --async)
        
        echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
        echo "Preview deployment started with ID: $BUILD_ID"
        
        # Wait for deployment to complete and stream logs
        echo "Streaming deployment logs..."
        gcloud beta builds log "$BUILD_ID" --stream --project=${{ env.GCP_PROJECT_ID }}
        
        # Check deployment status after streaming logs
        echo "Checking deployment status..."
        BUILD_STATUS=$(gcloud builds describe "$BUILD_ID" \
          --project=${{ env.GCP_PROJECT_ID }} \
          --format="value(status)")
        
        echo "Deployment status: $BUILD_STATUS"
        
        if [ "$BUILD_STATUS" != "SUCCESS" ]; then
          echo "❌ Deployment failed with status: $BUILD_STATUS"
          echo "Deployment logs are available at: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.GCP_PROJECT_ID }}"
          exit 1
        else
          echo "✅ Deployment completed successfully"
        fi

    - name: Get preview URL
      id: get-url
      run: |
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform=managed \
          --region=${{ env.GCP_REGION }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --format='value(status.url)' 2>/dev/null || echo "")
        
        if [ -z "$SERVICE_URL" ]; then
          echo "Failed to get service URL. The deployment might have failed."
          exit 1
        fi
        
        echo "PREVIEW_URL=$SERVICE_URL" >> $GITHUB_ENV
        echo "Preview URL: $SERVICE_URL"

    - name: Create Sentry release for preview
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        echo "Creating Sentry release for preview version: ${{ github.sha }}"
        
        # Debug: Check if SENTRY_AUTH_TOKEN is set (without exposing the value)
        if [ -z "$SENTRY_AUTH_TOKEN" ]; then
          echo "❌ ERROR: SENTRY_AUTH_TOKEN is not set!"
          echo "Please add SENTRY_AUTH_TOKEN to your repository secrets."
          exit 1
        else
          echo "✅ SENTRY_AUTH_TOKEN is set (length: ${#SENTRY_AUTH_TOKEN})"
        fi
        
        # Create new release
        npx @sentry/cli releases new "${{ github.sha }}" \
          --org "${{ env.SENTRY_ORG }}" \
          --project "${{ env.SENTRY_PROJECT }}"
        
        # Inject Debug IDs into source files
        npx @sentry/cli sourcemaps inject ./dist \
          --org "${{ env.SENTRY_ORG }}" \
          --project "${{ env.SENTRY_PROJECT }}"
        
        # Upload source maps
        npx @sentry/cli sourcemaps upload ./dist \
          --org "${{ env.SENTRY_ORG }}" \
          --project "${{ env.SENTRY_PROJECT }}" \
          --release "${{ github.sha }}" \
          --validate
        
        # Associate commits with release
        npx @sentry/cli releases set-commits "${{ github.sha }}" --auto \
          --org "${{ env.SENTRY_ORG }}" \
          --project "${{ env.SENTRY_PROJECT }}"
        
        # Finalize the release
        npx @sentry/cli releases finalize "${{ github.sha }}" \
          --org "${{ env.SENTRY_ORG }}" \
          --project "${{ env.SENTRY_PROJECT }}"
        
        # Mark as deployed to preview environment
        npx @sentry/cli releases deploys "${{ github.sha }}" new \
          --org "${{ env.SENTRY_ORG }}" \
          --project "${{ env.SENTRY_PROJECT }}" \
          --env preview \
          --name "Preview Deployment - ${{ env.BRANCH_NAME }}" \
          --url "${{ env.PREVIEW_URL }}"

        find ./dist -name "*.map" -type f -delete
        echo "Source maps cleaned up"
        
        echo "✅ Sentry release completed successfully for preview!"

    - name: Update deployment status
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PREVIEW_URL: ${{ env.PREVIEW_URL }}
      with:
        script: |
          const previewUrl = process.env.PREVIEW_URL;
          const serviceName = '${{ env.SERVICE_NAME }}';
          const prNumber = context.payload.pull_request.number;
          
          // Create deployment
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha,
            task: 'deploy:preview',
            auto_merge: false,
            required_contexts: [],
            environment: `preview-${prNumber}`,
            description: 'Preview deployment',
            transient_environment: true,
            production_environment: false
          });
          
          // Create deployment status
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            target_url: previewUrl,
            environment_url: previewUrl,
            description: 'Preview deployment ready'
          });

    - name: Comment on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PREVIEW_URL: ${{ env.PREVIEW_URL }}
      with:
        script: |
          const previewUrl = process.env.PREVIEW_URL;
          const prNumber = context.payload.pull_request.number;
          const serviceName = '${{ env.SERVICE_NAME }}';
          const sha = context.payload.pull_request.head.sha.substring(0, 7);
          
          // Check for existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## 🚀 Preview Deployment')
          );
          
          const commentBody = `## 🚀 Preview Deployment
          
          Your preview deployment is ready!
          
          🔗 **Preview URL**: ${previewUrl}/docs
          
          📝 **Details**:
          - Service: \`${serviceName}\`
          - Commit: \`${sha}\`
          - Branch: \`${{ env.BRANCH_NAME }}\`
          - Updated: ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
          
          ---
          
          This preview will be automatically updated with each new commit to this PR and will be deleted when the PR is merged or closed.`;
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
          }

